.slider {
    position: relative; //

    user-select: none;
    // overflow-x: scroll;
    overflow-x: hidden;
    overflow-y: visible !important; // не работает!(

    margin: 0 auto;

    // outline: solid 1px greenyellow;

    // ограничиваем макс. щирину внешней обёртки
    max-width: 100vw;

    // ширина внешней обёртки (с overflow-x: scroll;) должна быть больше  ширины внутреннего содержимого  чтобы не обрезались тени и увеличение карточки при наведении
    // задаём ширину внешней обертки - должна быть больше карточки (или карточек = расстояние между ними) на размер тени плюя сдвиг тени и всё это умножить на коэфф. scale при :hover (1.02)
    width: calc((30rem + (2 * 1.75rem)) * 1.02);

    @media ($mobileM) {
        width: calc((35.4rem + (2 * 1.75rem) * 1.02));
    }

    @media ($mobileL) {
        width: calc((38.4rem + (2 * 1.75rem)) * 1.02);
    }

    @media (min-width:calc(792px / 0.96)) {
        width: calc(((38.4rem * 2 + 2.4rem) + (1 * 1.75rem)) * 1.02);
    }

    @media (min-width:1250px) {
        width: calc(((38.4rem * 3 + 2 * 2.4rem) + (1 * 1.75rem)) * 1.02);
    }

    &__wrapper {

        // outline: 1px solid;

        display: flex;
        align-items: flex-end;

        // задаём высоту внутреннего wrappera ( из-за неработающего overflow-y: visible у внешнего контейнера (.slider) ) - к высоте карточки прибавляем размер тени (1.5rem), сдвиг тени (-0.5rem) и умножаем на коэфф. scale при :hover (1.02)
        // height: calc((50rem + 1.5rem - 0.5rem) * 1.02);
        height: calc((39.3rem + 1.5rem - 0.5rem) * 1.02);

        @media ($mobileM) {
            height: calc((45.6rem + 1.5rem - 0.5rem) * 1.02);
        }

        @media ($mobileL) {
            height: calc((50rem + 1.5rem - 0.5rem) * 1.02);
        }

        margin: 0 auto;
        margin-bottom: 3rem;

        // задаём ширину внутреннего wrappera - по ширине карточки. - для выравнивания по центру
        width: 30rem;

        @media ($mobileM) {
            width: 35.4rem;
        }

        @media ($mobileL) {
            width: 38.4rem;
        }

        // суммируем ширину 2-х карточек и расстояние между ними (gap) 
        @media (min-width:calc(792px / 0.96)) {
            //min-width :825px
            width: calc(38.4rem * 2 + 2.4rem);
        }

        // суммируем ширину 3-х карточек и  2 расстояния между ними (2 gap-а)
        @media (min-width:1250px) {
            width: calc((38.4rem * 3) + (2 * 2.4rem));
        }

        // will-change: transform;
    }

    &__cards-cont {
        display: flex;
        flex-direction: row;
        gap: 2.4rem;
        // will-change: transform;
    }

    &__card {
        flex-shrink: 0;

        &:last-child {
            margin-right: 2.4rem;
        }

        .card__img {
            pointer-events: none;
        }
    }

    &__controls {
        display: flex;
        justify-content: center;
        column-gap: 1rem;

        @media ($mobileM) {
            column-gap: 3rem;
        }

        position: absolute;
        bottom: 2rem; // как padding-bottom: 8rem; у .cards 
        left: 50%;
        transform: translate(-50%, 100%);
    }

    &__dots {
        display: flex;
        justify-content: center;
        column-gap: 2rem;
        width: 100vw;
        max-width: 20rem;
        flex-wrap: wrap;
        row-gap: 2rem;
    }
}


// for JS slider dots

.slider__dot_1card {
    display: block;

    @media (min-width:825px) {
        display: none !important;
    }
}

.slider__dot_2card {
    display: block;

    @media (min-width:1250px) {
        display: none !important;
    }
}

.btn_arrow {
    width: 4rem;
    display: block;
    height: 1.6rem;
    background: url('../images/Arrows.svg') no-repeat;
    background-size: 200%;
    transition: 0.3s;

    &:hover {
        transform: scale(1.2);
    }

    &_r {
        background-position: 120% 0%;
    }
}

.slider__dot {
    width: 1.5rem;
    height: 1.5rem;
    flex-shrink: 0;
    background-color: yellow;
    transition: 0.3s;

    user-select: none;

    &:hover {
        background-color: yellowgreen;
        cursor: pointer;
    }

    &_active {
        background-color: red;

        &:hover {
            background-color: darkred;
            cursor: auto
        }
    }
}